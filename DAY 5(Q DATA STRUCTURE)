#include <stdio.h>
#include <stdlib.h>

#define MAX_QUEUE_SIZE 100

typedef struct Queue {
    int front;
    int rear;
    int size;
    int elements[MAX_QUEUE_SIZE];
} Queue;

void init(Queue *q) {
    q->front = q->rear = -1;
    q->size = 0;
}

int is_empty(Queue *q) {
    return q->size == 0;
}

int is_full(Queue *q) {
    return q->size == MAX_QUEUE_SIZE;
}

void enqueue(Queue *q, int data) {
    if (is_full(q)) {
        printf("Error: queue is full\n");
        return;
    }

    if (is_empty(q)) {
        q->front = q->rear = 0;
    } else {
        q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
    }

    q->elements[q->rear] = data;
    q->size++;
}

int dequeue(Queue *q) {
    if (is_empty(q)) {
        printf("Error: queue is empty\n");
        return -1;
    }

    int data = q->elements[q->front];
    q->front = (q->front + 1) % MAX_QUEUE_SIZE;
    q->size--;

    if (is_empty(q)) {
        q->front = q->rear = -1;
    }

    return data;
}

void display(Queue *q) {
    if (is_empty(q)) {
        printf("Queue is empty\n");
        return;
    }

    int i;
    printf("Queue elements: ");
    for (i = q->front; i != q->rear; i = (i + 1) % MAX_QUEUE_SIZE) {
        printf("%d ", q->elements[i]);
    }
    printf("%d\n", q->elements[q->rear]);
}

int main() {
    Queue q;
    init(&q);

    int choice, data;

    do {
        printf("\n1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Quit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to be enqueued: ");
                scanf("%d", &data);
                enqueue(&q, data);
                break;
            case 2:
                data = dequeue(&q);
                if (data != -1) {
                    printf("Dequeued element: %d\n", data);
                }
                break;
            case 3:
                display(&q);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 4);

    return 0;
}





OUTPUT
1. Enqueue
2. Dequeue
3. Display
4. Quit
Enter your choice: 1
Enter the element to be enqueued: 23

1. Enqueue
2. Dequeue
3. Display
4. Quit
Enter your choice: 1
Enter the element to be enqueued: 2

1. Enqueue
2. Dequeue
3. Display
4. Quit
Enter your choice: 1
Enter the element to be enqueued: 5

1. Enqueue
2. Dequeue
3. Display
4. Quit
Enter your choice: 2
Dequeued element: 23

1. Enqueue
2. Dequeue
3. Display
4. Quit
Enter your choice: 3
Queue elements: 2 5

1. Enqueue
2. Dequeue
3. Display
4. Quit
Enter your choice: 4
Exiting...

--------------------------------
Process exited after 28.01 seconds with return value 0
Press any key to continue . . .
